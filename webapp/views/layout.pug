doctype html
html
  head
    if locals.title
      title= title
    else
      title Simapla Digital

    // Viewport mobile tag for sensible mobile support
    meta(charset="utf-8")

    meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1")

    meta(http-equiv="X-UA-Compatible", content="IE=edge")

    // STYLES

    // Bootstrap Core CSS
    link(href="css/bootstrap.min.css", rel="stylesheet")

    // Custom CSS
    link(href="css/landing-page.css", rel="stylesheet")

    // Custom Fonts
    link(href="font-awesome/css/font-awesome.min.css", rel="stylesheet", type="text/css")
    link(href="https://fonts.googleapis.com/css?family=Lato:300,400,700,300italic,400italic,700italic", rel="stylesheet", type="text/css")

    // HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries
    // WARNING: Respond.js doesn't work if you view the page via file://
    | <!--[if lt IE 9]>
    script(src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js")
    script(src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js")
    | <![endif]-->

    // STYLES END

    block styles

  body
    block body

    //-
      Client-side Templates
      ========================

      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.

      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).

      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Import templates from other directories
          + Use a different template engine (handlebars, jade, dust, etc.)
          + Internationalize your client-side templates using a server-side
            stringfile before they're served.

    // TEMPLATES

    // TEMPLATES END

    //-
      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    // SCRIPTS

    // jQuery
    script(src="/js/jquery.js")

    // Bootstrap Core JavaScript
    script(src="/js/bootstrap.min.js")

    block scripts

    // SCRIPTS END
